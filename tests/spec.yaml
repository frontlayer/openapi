openapi: 3.0.0
info:
  version: 1.0.0
  title: Space API
servers:
  - url: https://api.see.estate/
  - url: https://space-api.local/
components:
  parameters:
    Page:
      name: page
      in: query
      required: false
      description: Requested page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 1
    Limit:
      name: limit
      in: query
      required: false
      description: The numbers of items to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    Filter:
      name: filter
      in: query
      schema:
        $ref: '#/components/schemas/Filter'
    Sort:
      name: sort
      in: query
      required: false
      description: Sorting the results
      schema:
        $ref: '#/components/schemas/Filter'
  schemas:
    Filter:
      title: Filter
      type: array
      format: json
      default: '[]'
      items:
        type: object
        required:
          - field
          - value
        properties:
          field:
            type: string
            description: Filed which will be filtered
            minLength: 1
          value:
            description: Value of the filter
            nullable: true
            anyOf:
              - type: string
              - type: boolean
              - type: integer
              - type: number
          method:
            type: string
            description: 'Method for filtering > eq: Equal, ieq: Equal case insensitive,
              nq: Not equal, ine: Not equal case insensitive, lt: Less than, le: Less
              than or equal, gt: Greater than, ge: Greater than or equal, like: String
              pattern search *test*, ilike: String pattern search *test* case insensitive
              (for like methods use "*" wildcards), nlike & nilike is opposite of
              like & ilike'
            enum:
              - eq
              - ieq
              - ne
              - ine
              - lt
              - le
              - gt
              - ge
              - like
              - ilike
              - nlike
              - nilike
            default: eq
      example: '[{"field": "id", "value": 1}, {"field": "name", "value": "test", "method":
        "ieq"}]'
    Error:
      title: Service error
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: It can be exception code (e.g. 404) or error ID with which
            you will know how to suggest the user's problem (e.g. USER_FAMILY)
          minLength: 3
        message:
          type: string
          description: Error message
          minLength: 3
    Organization:
      title: Organization
      type: object
      required:
        - id
        - created
        - name
        - website
      properties:
        id:
          type: string
          format: objectId
          readOnly: true
          example: aaaabbbbccccddddeeeeffff
        created:
          type: string
          format: date-time
          readOnly: true
          example: "2019-01-17T14:07:25+0000"
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: Some organization
        website:
          type: string
          format: url
          minLength: 3
          maxLength: 100
          nullable: true
          example: https://www.foo-bar.com
        userSchema:
          $ref: '#/components/schemas/DataSchema'
    DataSchema:
      title: Data schema structure
      type: object
      minProperties: 1
      nullable: true
      additionalProperties:
        type: object
        minProperties: 1
        nullable: true
        required:
          - type
          - description
          - summary
          - properties
        properties:
          type:
            type: string
            enum:
              - object
          description:
            type: string
            minLength: 1
            maxLength: 200
          summary:
            type: string
            nullable: true
            minLength: 1
            maxLength: 100
          properties:
            type: object
            minProperties: 1
            additionalProperties:
              type: object
              required:
                - type
                - format
                - description
              properties:
                type:
                  type: string
                  enum:
                    - string
                    - boolean
                    - integer
                    - number
                format:
                  type: string
                  nullable: true
                  minLength: 1
                description:
                  type: string
                  minLength: 1
                  maxLength: 100
      example:
        employee:
          type: object
          description: Employee information
          summary: Here you can enter information about the employee
          properties:
            jobTitle:
              description: Job title
              type: string
              format: ~
            homeAddress:
              description: Home address
              type: string
              format: ~
            salary:
              description: Salary
              type: number
              format: double
            birthDate:
              description: Birth date (yyyy-mm-dd)
              type: string
              format: date
        contacts:
          type: object
          description: User contact data
          summary: Contact information
          properties:
            phone:
              description: Phone (primary)
              type: string
              format: ~
            phoneAdditional:
              description: Phone (additional)
              type: string
              format: ~
            personalEmail:
              description: Personal email
              type: string
              format: email
    User:
      title: User
      type: object
      required:
        - id
        - type
        - organizationId
        - email
        - firstName
        - lastName
        - lastActivity
      properties:
        id:
          type: string
          format: objectId
          example: aaaabbbbccccddddeeeeffff
        type:
          type: string
          enum:
            - admin
            - manager
            - customer
            - staff
            - tenant
          example: manager
        organizationId:
          type: string
          format: objectId
          nullable: true
          example: aaaabbbbccccddddeeeeffff
        email:
          type: string
          format: email
          nullable: true
          minLength: 3
          maxLength: 100
          example: user@gmail.com
        firstName:
          type: string
          minLength: 3
          maxLength: 100
          example: John
        lastName:
          type: string
          minLength: 3
          maxLength: 100
          example: Smith
        lastActivity:
          type: string
          format: date-time
          nullable: true
          example: "2019-01-17T14:07:25+0000"
        avatar:
          type: object
          nullable: true
          required:
            - url
            - width
            - height
          properties:
            url:
              type: string
              format: url
            width:
              type: integer
            height:
              type: integer
    Attributes:
      title: Attributes
      type: object
      minProperties: 1
      nullable: true
      additionalProperties:
        type: object
        minProperties: 1
        additionalProperties: true
      example:
        emplyee:
          key: value
          foo: bar
          jobTitle: Supervisor
          homeAddress: Bulgaria, Sofia, 109 Johnny Walker str.
          salary: 12.340000
    Role:
      title: role
      type: object
      required:
        - id
        - created
        - organizationId
        - name
        - userType
      properties:
        id:
          type: string
          format: objectId
          readOnly: true
          example: aaaabbbbccccddddeeeeffff
        created:
          type: string
          format: date-time
          readOnly: true
          example: "2019-01-17T14:07:25+0000"
        organizationId:
          type: string
          format: objectId
          readOnly: true
          example: aaaabbbbccccddddeeeeffff
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: Waiters
        userType:
          type: string
          enum:
            - admin
            - manager
            - customer
            - staff
            - tenant
          example: staff
    Permissions:
      title: Permissions
      type: array
      uniqueItems: true
      items:
        type: string
      example:
        - users.main.selfManage
        - users.main.list
        - users.main.update
        - users.main.remove
        - users.main.setPermissions
    UnitAccess:
      title: Unit access
      type: array
      uniqueItems: true
      items:
        type: object
        properties:
          type:
            type: string
            description: Type of the unit
            enum:
              - venue
              - floor
              - zone
            example: zone
          id:
            type: integer
            description: ID of the unit
            example: 1
    MenuCategory:
      title: Menu Category
      type: object
      required:
        - id
        - created
        - parentId
        - name
        - type
        - venueId
        - floorId
        - zoneId
        - availableType
        - availableDates
        - availableWeekDays
        - availableDateFrom
        - availableDateTo
        - availableHourFrom
        - availableHourTo
        - cover
        - notAvailable
        - notAvailableReason
        - items
      properties:
        id:
          type: string
          format: objectId
          readOnly: true
          example: aaaabbbbccccddddeeeeffff
        created:
          type: string
          format: date-time
          readOnly: true
          example: "2019-01-17T14:07:25+0000"
        parentId:
          type: string
          format: objectId
          nullable: true
          example: aaaabbbbccccddddeeeeffff
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: Salads
        type:
          type: string
          enum:
            - category
            - menu
          example: category
        venueId:
          type: integer
          example: 1
        floorId:
          type: integer
          nullable: true
          example: 2
        zoneId:
          type: integer
          nullable: true
          example: 3
        availableType:
          type: string
          nullable: true
          example: dates
          enum:
            - dates
            - weekDays
          description: 'How the category will be set as available. null: every day;
            dates: specific dates; weekDays: specific days of the week'
        availableDates:
          type: array
          uniqueItems: true
          items:
            type: string
            format: date
          example:
            - "2019-01-02"
            - "2019-01-03"
          description: The dates when the category will be available
        availableWeekDays:
          type: array
          uniqueItems: true
          items:
            type: integer
            minimum: 1
            maximum: 7
          example:
            - 1
            - 3
            - 4
          description: 'The days when the category will be available (1: Monday, 2:
            Thursday, ..., 7: Sunday)'
        availableDateFrom:
          type: string
          format: date
          nullable: true
          example: "2019-01-01"
          description: After this date the product will be available. If is null,
            the category will be available from now (the other criteria will be checked
            too)
        availableDateTo:
          type: string
          format: date
          nullable: true
          example: "2019-12-12"
          description: After this date the product will NOT be available. If is null,
            the category will be available forever (the other criteria will be checked
            too)
        availableHourFrom:
          type: string
          pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
          nullable: true
          example: "7:00"
          description: After this hour the product will be available. If is null,
            the category will be available whole day (the other criteria will be checked
            too)
        availableHourTo:
          type: string
          pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
          nullable: true
          example: "21:20"
          description: After this hour the product will NOT be available. If is null,
            the category will be available whole day (the other criteria will be checked
            too)
        cover:
          type: object
          nullable: true
          required:
            - url
            - width
            - height
          properties:
            url:
              type: string
              format: url
            width:
              type: integer
            height:
              type: integer
        notAvailable:
          type: boolean
          example: false
          readOnly: true
          description: Is the category not available. It will be "true" if there are
            no available items and/or dates/days and/or it`s not in the from & to
            range
        notAvailableReason:
          type: string
          nullable: true
          readOnly: true
          description: Explain why the category is not available
        items:
          type: array
          readOnly: true
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MenuItem'
    MenuItem:
      title: Menu Item
      type: object
      required:
        - id
        - created
        - name
        - summary
        - currency
        - price
        - isAvailable
        - isDeliverable
        - isCollectable
        - modifiers
        - categories
        - photos
      properties:
        id:
          type: string
          format: objectId
          readOnly: true
          example: aaaabbbbccccddddeeeeffff
        created:
          type: string
          format: date-time
          readOnly: true
          example: "2019-01-17T14:07:25+0000"
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: Salads
        summary:
          type: string
          maxLength: 500
          example: Summary of the item....
        currency:
          type: string
          nullable: true
          minLength: 3
          maxLength: 3
          example: GBP
        price:
          type: number
          format: double
          nullable: true
          minimum: 0
          example: 12.230000
        isAvailable:
          type: boolean
          example: true
        isDeliverable:
          type: boolean
          example: true
        isCollectable:
          type: boolean
          example: true
        modifiers:
          $ref: '#/components/schemas/Modifiers'
        categories:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: object
            additionalProperties: true
            description: 'Check: #/components/schemas/MenuCategory'
        photos:
          type: array
          uniqueItems: true
          items:
            type: object
            required:
              - id
              - url
              - width
              - height
            properties:
              id:
                type: string
                format: objectId
                readOnly: true
                example: aaaabbbbccccddddeeeeffff
              url:
                type: string
                format: url
              width:
                type: integer
              height:
                type: integer
          example:
            - id: aaaabbbbccccddddeeeeffff
              url: https://via.placeholder.com/250
              width: 250
              height: 250
    Modifiers:
      title: Item Modifiers
      type: array
      items:
        type: object
        required:
          - name
          - isRequired
          - isRangeable
          - rangeFrom
          - rangeTo
          - rangePrice
          - options
        properties:
          name:
            type: string
            minLength: 3
            maxLength: 100
            example: Size
          isRequired:
            type: boolean
            example: false
          isRangeable:
            type: boolean
            example: false
          rangeFrom:
            type: integer
            nullable: true
            minimum: 0
            example: 0
          rangeTo:
            type: integer
            nullable: true
            minimum: 0
            example: 5
          rangePrice:
            type: number
            format: double
            nullable: true
            example: 1.500000
          options:
            type: array
            items:
              type: object
              required:
                - name
                - price
                - isDefault
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Big
                price:
                  type: number
                  format: double
                  nullable: true
                  example: 12.230000
                isDefault:
                  type: boolean
                  example: false
      example:
        - name: Size
          isRequired: true
          isRangeable: false
          rangeFrom: ~
          rangeTo: ~
          rangePrice: ~
          options:
            - name: Small
              price: -10
              isDefault: false
            - name: Normal
              price: 0
              isDefault: true
            - name: Big
              price: 20
              isDefault: false
        - name: Eggs
          isRequired: false
          isRangeable: true
          rangeFrom: 0
          rangeTo: 5
          rangePrice: 1.500000
          options: []
        - name: Salt
          isRequired: false
          isRangeable: false
          rangeFrom: ~
          rangeTo: ~
          rangePrice: ~
          options:
            - name: No salt
              price: 0
              isDefault: false
            - name: Normal
              price: 0
              isDefault: true
            - name: Extra salt
              price: 0
              isDefault: false
            - name: Super salty
              price: 0
              isDefault: false
  securitySchemes:
    token:
      type: apiKey
      in: header
      name: X-Token
    key:
      type: apiKey
      in: header
      name: X-Key
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
paths:
  /token:
    post:
      operationId: Token::generate
      summary: Generate user token
      description: Generate new token for specific user by email and password
      tags:
        - token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  minLength: 3
                  maxLength: 100
                  example: user@gmail.com
                password:
                  type: string
                  example: 2Lv<J^
      responses:
        200:
          description: User token is generated
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    description: Generated user token
                    pattern: /^[0-9a-f]{50}$/
                    minLength: 50
                    maxLength: 50
                    example: d3a889468b2a61fad5a9131f1114f02c8978f064eccbc92d5f
                  ttl:
                    type: integer
                    description: Time to live on the token in seconds
                    example: 1
        422:
          description: User not found or incorrect password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: Token::destroy
      summary: Destroy current token
      description: If you want to destroy current token (logout) you need to use this
        method. You do not need to send current token because it's already declared
        in security restrictions.
      tags:
        - token
      security:
        - token:
            - users.main.selfManage
      responses:
        200:
          description: Token is destroyed
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        401:
          $ref: '#/components/responses/Unauthorized'
  /organizations:
    get:
      operationId: Organizations::list
      summary: List organizations
      description: 'List organizations (only admin user can access this resource).
        Available filters: id, created, name, website'
      tags:
        - organizations
      security:
        - token:
            - users.organizations.list
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: List with organizations
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - total
                  - limit
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
                  total:
                    type: integer
                    minimum: 0
                    example: 400
                  limit:
                    type: integer
                    minimum: 1
                    example: 10
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      operationId: Organizations::create
      summary: Create organizations
      description: Create new organizations (only admin user can access this resource)
      tags:
        - organizations
      security:
        - token:
            - users.organizations.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - website
                - userSchema
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Some organization
                website:
                  type: string
                  format: url
                  minLength: 3
                  maxLength: 100
                  nullable: true
                  example: https://www.foo-bar.com
                userSchema:
                  $ref: '#/components/schemas/DataSchema'
      responses:
        201:
          description: Created organization data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        409:
          description: There is organization with the same name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /organizations/{organizationId}:
    parameters:
      - name: organizationId
        in: path
        description: Numeric ID of the organization
        required: true
        schema:
          type: string
          format: objectId
          readOnly: true
        example: aaaabbbbccccddddeeeeffff
    get:
      operationId: Organizations::get
      summary: Get specific organization info
      description: Get info for specific organization in you organization (only admin
        user can access this resource)
      tags:
        - organizations
      security:
        - token:
            - users.organizations.get
      responses:
        200:
          description: Organization update data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        404:
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      operationId: Organizations::update
      summary: Update organization data
      description: From here you can make a set of changes for the organization in
        your organization (only admin user can access this resource)
      tags:
        - organizations
      security:
        - token:
            - users.organizations.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Some organization
                website:
                  type: string
                  format: url
                  minLength: 3
                  maxLength: 100
                  nullable: true
                userSchema:
                  $ref: '#/components/schemas/DataSchema'
      responses:
        200:
          description: Updated otganization data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        409:
          description: There is organization with the same name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: Organizations::remove
      summary: Remove organization
      description: Delete organization from your organization (only admin user can
        access this resource)
      tags:
        - organizations
      security:
        - token:
            - users.organizations.remove
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        404:
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users:
    get:
      operationId: Users::list
      summary: List users
      description: 'The users list dependence from the access and permissions you
        have . Available filters: id, created, type, organizationId, email, firstName,
        lastName, lastActivity'
      tags:
        - users
      security:
        - token:
            - users.main.list
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - total
                  - limit
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    minimum: 0
                    example: 400
                  limit:
                    type: integer
                    minimum: 1
                    example: 10
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      operationId: Users::create
      summary: Create new user in your organisation
      description: Create new user in your organisation and specify the type and other
        details
      tags:
        - users
      security:
        - token:
            - users.main.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - email
                - firstName
                - lastName
              properties:
                type:
                  type: string
                  enum:
                    - admin
                    - manager
                    - customer
                    - staff
                    - tenant
                  example: manager
                organizationId:
                  type: string
                  format: objectId
                  readOnly: true
                  example: aaaabbbbccccddddeeeeffff
                email:
                  type: string
                  format: email
                  nullable: true
                  minLength: 3
                  maxLength: 100
                  example: user@gmail.com
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: John
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Smith
      responses:
        201:
          description: Created user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: Numeric ID (or string "me") of the user
        required: true
        schema:
          anyOf:
            - type: string
              format: objectId
            - type: string
              enum:
                - me
        example: me
      - name: include
        in: query
        description: Include extra information about the user
        required: false
        schema:
          type: array
          format: json
          default: '[]'
          items:
            type: string
            enum:
              - permissions
              - unit-access
    get:
      operationId: Users::get
      summary: Get user details by id (or current user)
      description: Get details about specific user by entering his {userId} or get
        current user info with "me" instead of {userId}
      tags:
        - users
      security:
        - token:
            - users.main.get
            - users.main.selfManage
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  permissions:
                    $ref: '#/components/schemas/Permissions'
                  unit-access:
                    $ref: '#/components/schemas/UnitAccess'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      operationId: Users::update
      summary: Update user details
      description: Update user details by {userId} or update current user with "me"
        instead of {userId}
      tags:
        - users
      security:
        - token:
            - users.main.update
            - users.main.selfManage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: John
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Smith
                password:
                  type: string
                  minLength: 3
                  example: Pa$$worD
      responses:
        200:
          description: Uopdated user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: Users::remove
      summary: Remove user
      description: Delete user from your organization
      tags:
        - users
      security:
        - token:
            - users.main.remove
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/{userId}/attributes:
    patch:
      operationId: Users::setAttributes
      summary: Update user attributes
      description: Update user attributes. This request will update only the attributes
        in it
      tags:
        - users
      security:
        - token:
            - users.main.update
            - users.main.selfManage
      parameters:
        - name: userId
          in: path
          description: Numeric ID (or string "me") of the user
          required: true
          schema:
            anyOf:
              - type: string
                format: objectId
              - type: string
                enum:
                  - me
          example: me
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attributes'
      responses:
        200:
          description: Photo info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attributes'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/{userId}/photo/{photoType}:
    parameters:
      - name: userId
        in: path
        description: Numeric ID (or string "me") of the user
        required: true
        schema:
          anyOf:
            - type: string
              format: objectId
            - type: string
              enum:
                - me
        example: me
      - name: photoType
        in: path
        description: Type of the file you want to upload
        required: true
        schema:
          type: string
          enum:
            - avatar
    post:
      operationId: Users::setPhoto
      summary: Upload user photo
      description: Set user avatar or other type of photo
      tags:
        - users
      security:
        - token:
            - users.main.update
            - users.main.selfManage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Photo info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: Users::removePhoto
      summary: Delete user photo
      description: Delete user avatar or other type of photo
      tags:
        - users
      security:
        - token:
            - users.main.update
            - users.main.selfManage
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /users/zero:
    post:
      operationId: Users::zero
      summary: Create the first user (mostly for tests)
      description: User-zero is for tests propose
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  nullable: true
                  minLength: 3
                  maxLength: 100
                  example: user@gmail.com
                password:
                  type: string
                  minLength: 3
                  example: Pa$$worD
      responses:
        201:
          description: Created user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /roles:
    get:
      operationId: Roles::list
      summary: List Roles
      description: 'List organization roles. Available filters: id, created, name,
        userType'
      tags:
        - roles
      security:
        - token:
            - users.roles.list
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: List of the roles
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - total
                  - limit
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  total:
                    type: integer
                    minimum: 0
                    example: 400
                  limit:
                    type: integer
                    minimum: 1
                    example: 10
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      operationId: Roles::create
      summary: Create new role
      description: Create new role and specify the details in it
      tags:
        - roles
      security:
        - token:
            - users.roles.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - userType
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Waiters
                userType:
                  type: string
                  enum:
                    - admin
                    - manager
                    - customer
                    - staff
                    - tenant
                  example: staff
      responses:
        201:
          description: Created role data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        401:
          $ref: '#/components/responses/Unauthorized'
  /roles/{roleId}:
    parameters:
      - name: roleId
        in: path
        description: Role id
        required: true
        schema:
          type: string
          format: objectId
          readOnly: true
        example: aaaabbbbccccddddeeeeffff
    get:
      operationId: Roles::get
      summary: Get role details
      description: Get role details
      tags:
        - roles
      security:
        - token:
            - users.roles.get
      responses:
        200:
          description: Role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      operationId: Roles::update
      summary: Update role details
      description: Update role details
      tags:
        - roles
      security:
        - token:
            - users.roles.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Waiters
      responses:
        200:
          description: Uopdated role data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: Roles::remove
      summary: Remove role
      description: Delete single role
      tags:
        - roles
      security:
        - token:
            - users.roles.remove
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /access/{userId}/permissions:
    put:
      operationId: Access::permissions
      summary: Set user permissions
      description: Set user permissions
      tags:
        - access
      security:
        - token:
            - users.access.permissions-set
      parameters:
        - name: userId
          in: path
          description: Numeric ID of the user
          required: true
          schema:
            type: string
            format: objectId
          example: aaaabbbbccccddddeeeeffff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permissions'
      responses:
        200:
          description: New user permissions list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissions'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /access/{userId}/unit:
    put:
      operationId: Access::unit
      summary: Set user unit access
      description: Set user unit access
      tags:
        - access
      security:
        - token:
            - users.permissions.set
      parameters:
        - name: userId
          in: path
          description: Numeric ID of the user
          required: true
          schema:
            type: string
            format: objectId
          example: aaaabbbbccccddddeeeeffff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitAccess'
      responses:
        200:
          description: Unit access is set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitAccess'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /access/permission:
    get:
      operationId: Access::permissionList
      summary: Retrieve all project permission
      description: Retrieve all project permission
      tags:
        - access
      security:
        - token:
            - users.access.permissions-list
      responses:
        200:
          description: Full permission list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - title
                    - groups
                  properties:
                    title:
                      type: string
                      minLength: 1
                      example: Users
                    groups:
                      type: array
                      items:
                        type: object
                        properties:
                          title:
                            type: string
                            minLength: 1
                            example: Business intelligence
                          permissions:
                            type: array
                            items:
                              type: object
                              properties:
                                accessible:
                                  type: boolean
                                  example: true
                                permission:
                                  type: string
                                  minLength: 1
                                  example: users.bi.list
                                title:
                                  type: string
                                  minLength: 1
                                  example: BI listing
        401:
          $ref: '#/components/responses/Unauthorized'
  /menu/categories:
    get:
      operationId: MenuCategories::list
      summary: List menu categories
      description: 'Menu categories. Available filters: id, created, parentId, name,
        type, venueId, floorId, zoneId'
      tags:
        - menu categories
      security:
        - token:
            - menu.categories.list
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: List of the categories
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - total
                  - limit
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuCategory'
                  total:
                    type: integer
                    minimum: 0
                    example: 400
                  limit:
                    type: integer
                    minimum: 1
                    example: 10
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      operationId: MenuCategories::create
      summary: Create new menu category
      description: Create new menu category and specify the details in it
      tags:
        - menu categories
      security:
        - token:
            - menu.categories.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - venueId
                - floorId
                - zoneId
                - availableType
                - availableDates
                - availableWeekDays
                - availableDateFrom
                - availableDateTo
                - availableHourFrom
                - availableHourTo
              properties:
                parentId:
                  type: string
                  format: objectId
                  nullable: true
                  example: aaaabbbbccccddddeeeeffff
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Salads
                type:
                  type: string
                  enum:
                    - category
                    - menu
                  example: category
                venueId:
                  type: integer
                  example: 1
                floorId:
                  type: integer
                  nullable: true
                  example: 2
                zoneId:
                  type: integer
                  nullable: true
                  example: 3
                availableType:
                  type: string
                  nullable: true
                  example: dates
                  enum:
                    - dates
                    - weekDays
                availableDates:
                  type: array
                  uniqueItems: true
                  items:
                    type: string
                    format: date
                  example:
                    - "2019-01-02"
                    - "2019-01-03"
                availableWeekDays:
                  type: array
                  uniqueItems: true
                  items:
                    type: integer
                    minimum: 1
                    maximum: 7
                  example:
                    - 1
                    - 3
                    - 4
                availableDateFrom:
                  type: string
                  format: date
                  nullable: true
                  example: "2019-01-01"
                availableDateTo:
                  type: string
                  format: date
                  nullable: true
                  example: "2019-12-12"
                availableHourFrom:
                  type: string
                  pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
                  nullable: true
                  example: "7:00"
                availableHourTo:
                  type: string
                  pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
                  nullable: true
                  example: "21:20"
      responses:
        201:
          description: Created category data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuCategory'
        401:
          $ref: '#/components/responses/Unauthorized'
  /menu/categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        description: Category id
        required: true
        schema:
          type: string
          format: objectId
          readOnly: true
        example: aaaabbbbccccddddeeeeffff
    get:
      operationId: MenuCategories::get
      summary: Get category details
      description: Get category details
      tags:
        - menu categories
      security:
        - token:
            - menu.categories.get
      responses:
        200:
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuCategory'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      operationId: MenuCategories::update
      summary: Update category details
      description: Update category details
      tags:
        - menu categories
      security:
        - token:
            - menu.categories.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                parentId:
                  type: string
                  format: objectId
                  nullable: true
                  example: aaaabbbbccccddddeeeeffff
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Salads
                type:
                  type: string
                  enum:
                    - category
                    - menu
                  example: category
                venueId:
                  type: integer
                  example: 1
                floorId:
                  type: integer
                  nullable: true
                  example: 2
                zoneId:
                  type: integer
                  nullable: true
                  example: 3
                availableType:
                  type: string
                  nullable: true
                  example: dates
                  enum:
                    - dates
                    - weekDays
                availableDates:
                  type: array
                  uniqueItems: true
                  items:
                    type: string
                    format: date
                  example:
                    - "2019-01-02"
                    - "2019-01-03"
                availableWeekDays:
                  type: array
                  uniqueItems: true
                  items:
                    type: integer
                    minimum: 1
                    maximum: 7
                  example:
                    - 1
                    - 3
                    - 4
                availableDateFrom:
                  type: string
                  format: date
                  nullable: true
                  example: "2019-01-01"
                availableDateTo:
                  type: string
                  format: date
                  nullable: true
                  example: "2019-12-12"
                availableHourFrom:
                  type: string
                  pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
                  nullable: true
                  example: "7:00"
                availableHourTo:
                  type: string
                  pattern: /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/
                  nullable: true
                  example: "21:20"
      responses:
        200:
          description: Uopdated category data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuCategory'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: MenuCategories::remove
      summary: Remove category
      description: Delete single category. You can`t delete a category if there are
        items or/and sub-categories in it
      tags:
        - menu categories
      security:
        - token:
            - menu.categories.remove
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        406:
          description: There are sub-categories or assigned items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /menu/categories/{categoryId}/photo/{photoType}:
    parameters:
      - name: categoryId
        in: path
        description: Category id
        required: true
        schema:
          type: string
          format: objectId
          readOnly: true
        example: aaaabbbbccccddddeeeeffff
      - name: photoType
        in: path
        description: Type of the file you want to upload
        required: true
        schema:
          type: string
          enum:
            - cover
    post:
      operationId: MenuCategories::setPhoto
      summary: Upload category photo
      description: Set category cover or other type of photo
      tags:
        - menu categories
      security:
        - token:
            - menu.categories.update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Category info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuCategory'
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: MenuCategories::removePhoto
      summary: Delete category photo
      description: Delete category photo
      tags:
        - menu categories
      security:
        - token:
            - menu.categories.update
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        404:
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /menu/items:
    get:
      operationId: MenuItems::list
      summary: List menu items
      description: 'Menu items. Available filters: id, created, name, summary, currency,
        price, isAvailable, isDeliverable, isCollectable'
      tags:
        - menu items
      security:
        - token:
            - menu.items.list
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Sort'
      responses:
        200:
          description: List of the items
          content:
            application/json:
              schema:
                type: object
                required:
                  - results
                  - total
                  - limit
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'
                  total:
                    type: integer
                    minimum: 0
                    example: 400
                  limit:
                    type: integer
                    minimum: 1
                    example: 10
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      operationId: MenuItems::create
      summary: Create new menu item
      description: Create new menu item and specify the details in it
      tags:
        - menu items
      security:
        - token:
            - menu.items.create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - summary
                - currency
                - price
                - isAvailable
                - isDeliverable
                - isCollectable
                - modifiers
                - categories
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Salads
                summary:
                  type: string
                  maxLength: 500
                  example: Summary of the item....
                currency:
                  type: string
                  nullable: true
                  minLength: 3
                  maxLength: 3
                  example: GBP
                price:
                  type: number
                  format: double
                  nullable: true
                  minimum: 0
                  example: 12.230000
                isAvailable:
                  type: boolean
                  example: true
                isDeliverable:
                  type: boolean
                  example: true
                isCollectable:
                  type: boolean
                  example: true
                modifiers:
                  $ref: '#/components/schemas/Modifiers'
                categories:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: string
                    format: objectId
      responses:
        201:
          description: Created item data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        401:
          $ref: '#/components/responses/Unauthorized'
  /menu/items/{itemId}:
    parameters:
      - name: itemId
        in: path
        description: Item id
        required: true
        schema:
          type: string
          format: objectId
          readOnly: true
        example: aaaabbbbccccddddeeeeffff
    get:
      operationId: MenuItems::get
      summary: Get item details
      description: Get item details
      tags:
        - menu items
      security:
        - token:
            - menu.main.get
      responses:
        200:
          description: Item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        404:
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      operationId: MenuItems::update
      summary: Update item details
      description: Update item details
      tags:
        - menu items
      security:
        - token:
            - menu.main.update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 100
                  example: Salads
                summary:
                  type: string
                  maxLength: 500
                  example: Summary of the item....
                currency:
                  type: string
                  nullable: true
                  minLength: 3
                  maxLength: 3
                  example: GBP
                price:
                  type: number
                  format: double
                  nullable: true
                  minimum: 0
                  example: 12.230000
                isAvailable:
                  type: boolean
                  example: true
                isDeliverable:
                  type: boolean
                  example: true
                isCollectable:
                  type: boolean
                  example: true
                modifiers:
                  $ref: '#/components/schemas/Modifiers'
                categories:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    type: string
                    format: objectId
      responses:
        200:
          description: Uopdated item data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        404:
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      operationId: MenuItems::remove
      summary: Remove item
      description: Delete single item
      tags:
        - menu items
      security:
        - token:
            - menu.main.remove
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        404:
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /menu/items/{itemId}/photo:
    post:
      operationId: MenuItems::uploadPhoto
      summary: Upload item photos
      description: Upload item photo
      tags:
        - menu items
      security:
        - token:
            - menu.main.update
      parameters:
        - name: itemId
          in: path
          description: Item id
          required: true
          schema:
            type: string
            format: objectId
            readOnly: true
          example: aaaabbbbccccddddeeeeffff
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: Item info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        404:
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /menu/items/{itemId}/photo/{photoId}:
    delete:
      operationId: MenuItems::removePhoto
      summary: Delete item photo
      description: Delete specific item photo
      tags:
        - menu items
      security:
        - token:
            - menu.main.update
      parameters:
        - name: itemId
          in: path
          description: Item id
          required: true
          schema:
            type: string
            format: objectId
            readOnly: true
          example: aaaabbbbccccddddeeeeffff
        - name: photoId
          in: path
          description: Photo id
          required: true
          schema:
            type: string
            format: objectId
            readOnly: true
          example: aaaabbbbccccddddeeeeffff
      responses:
        200:
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        404:
          description: Item or photo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          $ref: '#/components/responses/Unauthorized'
  /api/info:
    get:
      operationId: Api::info
      summary: Service information
      tags:
        - api
      responses:
        200:
          description: Object with basic service information (version, permissions
            list and perhaps more info)
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                properties:
                  date:
                    type: string
                    format: date-time
                  permissions:
                    type: array
                    uniqueItems: true
                    items:
                      type: string
  /api/health-check:
    get:
      operationId: Api::healthCheck
      summary: Service health check
      description: Check health of the used services (e.g. database, cache, other)
      tags:
        - api
      responses:
        200:
          description: Object with health of the services
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        500:
          description: There is a problem with the service
  /api/specification:
    get:
      operationId: Api::specification
      summary: OpenAPI YAML
      description: YAML of OpenAPI (Swagger 3)
      tags:
        - api
      responses:
        200:
          description: Get current service OpenAPI YAML
          content:
            application/yaml:
              schema:
                type: string
  /api/docs:
    get:
      operationId: Api::docs
      summary: API Documentation
      description: API Documentation combined with openapi/swagger editor
      tags:
        - api
      responses:
        200:
          description: HTML Response with full service documentation
          content:
            text/html:
              schema:
                type: string
  /experiment:
    get:
      operationId: Experiment::test
      summary: Nothing ot see here
      description: Experimental action for tests
      tags:
        - experiment
      responses:
        200:
          description: Experimental action for tests
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        400:
          description: Experimental action for tests
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /depricated:
    get:
      operationId: Nothing::todo
      summary: Just temporary list with depricated permissions
      description: Temporary list with depricated permissions
      tags:
        - experiment
      responses:
        200:
          description: Whatever
      security:
        - token:
            - users.bi.list
            - tracking.location.list
            - tracking.location.list
            - venues.main.list
            - venues.main.create
            - venues.main.update
            - venues.main.remove
            - venues.floors.list
            - venues.floors.create
            - venues.floors.update
            - venues.floors.remove
            - venues.zones.list
            - venues.zones.create
            - venues.zones.update
            - venues.zones.remove
            - venues.documents.list
            - venues.documents.create
            - venues.documents.update
            - venues.documents.remove
            - users.groups.list
            - users.groups.create
            - users.groups.update
            - users.groups.remove
